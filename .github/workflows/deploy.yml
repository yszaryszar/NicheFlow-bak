name: Deploy NicheFlow Backend

on:
  push:
    branches:
      - main
    paths:
      - "backend/**"
      - ".github/workflows/**"

jobs:
  check-backend-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: check
        run: |
          git diff --name-only HEAD^ HEAD > changes.txt
          echo "has_changes=$(grep -q '^backend/' changes.txt && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

  deploy-backend-hk:
    name: Deploy Backend to Hong Kong
    needs: check-backend-changes
    runs-on: ubuntu-latest
    if: needs.check-backend-changes.outputs.has_changes == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (HK)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-east-1

      - name: Login to Amazon ECR
        id: login-ecr-hk
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names nicheflow-api || \
          aws ecr create-repository \
            --repository-name nicheflow-api \
            --image-scanning-configuration scanOnPush=true

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-hk.outputs.registry }}
          ECR_REPOSITORY: nicheflow-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2 (HK)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_HK }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_HK }}
          script: |
            # 复制配置文件
            cat > config.prod.yaml << 'EOL'
            app:
              name: NicheFlow
              version: 0.1.0
              env: production
              mode: release
              port: 80
              base_url: https://api.getnicheflow.com
              region: hk

            database:
              driver: postgres
              host: ${{ secrets.DB_HOST_HK }}
              port: ${{ secrets.DB_PORT }}
              name: ${{ secrets.DB_NAME }}
              user: ${{ secrets.DB_USER }}
              password: ${{ secrets.DB_PASSWORD }}
              ssl_mode: require
              max_idle_conns: 10
              max_open_conns: 100
              conn_max_lifetime: 1h

            redis:
              host: ${{ secrets.REDIS_HOST_HK }}
              port: ${{ secrets.REDIS_PORT }}
              password: ${{ secrets.REDIS_PASSWORD }}
              db: 0
              tls_enable: true

            openai:
              model: gpt-4-turbo-preview
              max_tokens: 2000
              temperature: 0.7

            anthropic:
              model: claude-3-opus
              max_tokens: 2000
              temperature: 0.7

            middleware:
              rate_limit:
                enabled: true
                limit: 100
                duration: 1m
              cors:
                allow_origins:
                  - https://getnicheflow.com
                  - https://www.getnicheflow.com
                allow_methods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - OPTIONS
                allow_headers:
                  - Authorization
                  - Content-Type
                  - X-Clerk-User-Id
                max_age: 300
            EOL

            # 设置环境变量
            cat > .env << 'EOL'
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_ORG_ID=${{ secrets.OPENAI_ORG_ID }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
            CLERK_API_KEY=${{ secrets.CLERK_API_KEY }}
            EOL

            # 拉取新镜像并重启服务
            docker pull ${{ steps.login-ecr-hk.outputs.registry }}/nicheflow-api:${{ github.sha }}
            docker compose down
            echo "IMAGE_TAG=${{ github.sha }}" >> .env
            docker compose up -d

  deploy-backend-us:
    name: Deploy Backend to US
    needs: check-backend-changes
    runs-on: ubuntu-latest
    if: needs.check-backend-changes.outputs.has_changes == 'true'

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (US)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr-us
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names nicheflow-api || \
          aws ecr create-repository \
            --repository-name nicheflow-api \
            --image-scanning-configuration scanOnPush=true

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-us.outputs.registry }}
          ECR_REPOSITORY: nicheflow-api
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy to EC2 (US)
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_US }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY_US }}
          script: |
            # 复制配置文件
            cat > config.prod.yaml << 'EOL'
            app:
              name: NicheFlow
              version: 0.1.0
              env: production
              mode: release
              port: 80
              base_url: https://api.getnicheflow.com
              region: us

            database:
              driver: postgres
              host: ${{ secrets.DB_HOST_US }}
              port: ${{ secrets.DB_PORT }}
              name: ${{ secrets.DB_NAME }}
              user: ${{ secrets.DB_USER }}
              password: ${{ secrets.DB_PASSWORD }}
              ssl_mode: require
              max_idle_conns: 10
              max_open_conns: 100
              conn_max_lifetime: 1h

            redis:
              host: ${{ secrets.REDIS_HOST_US }}
              port: ${{ secrets.REDIS_PORT }}
              password: ${{ secrets.REDIS_PASSWORD }}
              db: 0
              tls_enable: true

            openai:
              model: gpt-4-turbo-preview
              max_tokens: 2000
              temperature: 0.7

            anthropic:
              model: claude-3-opus
              max_tokens: 2000
              temperature: 0.7

            middleware:
              rate_limit:
                enabled: true
                limit: 100
                duration: 1m
              cors:
                allow_origins:
                  - https://getnicheflow.com
                  - https://www.getnicheflow.com
                allow_methods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - OPTIONS
                allow_headers:
                  - Authorization
                  - Content-Type
                  - X-Clerk-User-Id
                max_age: 300
            EOL

            # 设置环境变量
            cat > .env << 'EOL'
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            OPENAI_ORG_ID=${{ secrets.OPENAI_ORG_ID }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
            CLERK_API_KEY=${{ secrets.CLERK_API_KEY }}
            EOL

            # 拉取新镜像并重启服务
            docker pull ${{ steps.login-ecr-us.outputs.registry }}/nicheflow-api:${{ github.sha }}
            docker compose down
            echo "IMAGE_TAG=${{ github.sha }}" >> .env
            docker compose up -d

  notify:
    needs: [deploy-backend-hk, deploy-backend-us]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Send deployment notification email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: NicheFlow 后端部署状态通知
          body: |
            NicheFlow 后端部署状态报告：

            香港区域: ${{ needs.deploy-backend-hk.result == 'success' && '✅ 部署成功' || '❌ 部署失败' }}
            美国区域: ${{ needs.deploy-backend-us.result == 'success' && '✅ 部署成功' || '❌ 部署失败' }}

            部署详情：
            - 部署时间：${{ github.event.head_commit.timestamp }}
            - 提交信息：${{ github.event.head_commit.message }}
            - 提交作者：${{ github.event.head_commit.author.name }}
            - 提交 SHA：${{ github.sha }}

            如有部署失败，请及时检查相关日志和服务状态。
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: NicheFlow 部署系统 <${{ secrets.EMAIL_USERNAME }}>

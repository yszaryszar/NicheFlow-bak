name: Deploy Backend

on:
  push:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy-backend-hk:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials for Hong Kong
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ap-east-1

      - name: Login to Amazon ECR Hong Kong
        id: login-ecr-hk
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
          mask-password: true

      - name: Build and push image to Amazon ECR Hong Kong
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-hk.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/nicheflow-api:$IMAGE_TAG .
          docker push $ECR_REGISTRY/nicheflow-api:$IMAGE_TAG

      - name: Deploy to EC2 Hong Kong
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_HK }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_HK }}
          port: 22
          script: |
            # 克隆仓库获取最新的 docker-compose.yml
            rm -rf NicheFlow
            git clone https://github.com/yszaryszar/NicheFlow.git
            cd NicheFlow/backend

            # 设置环境变量
            export ECR_REGISTRY="${{ steps.login-ecr-hk.outputs.registry }}"
            export IMAGE_TAG="${{ github.sha }}"
            export AWS_REGION="ap-east-1"

            # 停止并删除旧容器
            docker compose down || true

            # 拉取新镜像
            aws ecr get-login-password --region ap-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/nicheflow-api:$IMAGE_TAG

            # 启动新容器
            docker compose up -d

            # 清理未使用的镜像
            docker image prune -f

  deploy-backend-us:
    runs-on: ubuntu-latest
    needs: deploy-backend-hk

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials for US
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR US
        id: login-ecr-us
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: private
          mask-password: true

      - name: Build and push image to Amazon ECR US
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-us.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          docker build -t $ECR_REGISTRY/nicheflow-api:$IMAGE_TAG .
          docker push $ECR_REGISTRY/nicheflow-api:$IMAGE_TAG

      - name: Deploy to EC2 US
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST_US }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_US }}
          port: 22
          script: |
            # 克隆仓库获取最新的 docker-compose.yml
            rm -rf NicheFlow
            git clone https://github.com/yszaryszar/NicheFlow.git
            cd NicheFlow/backend

            # 设置环境变量
            export ECR_REGISTRY="${{ steps.login-ecr-us.outputs.registry }}"
            export IMAGE_TAG="${{ github.sha }}"
            export AWS_REGION="us-east-1"

            # 停止并删除旧容器
            docker compose down || true

            # 拉取新镜像
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/nicheflow-api:$IMAGE_TAG

            # 启动新容器
            docker compose up -d

            # 清理未使用的镜像
            docker image prune -f

  notify:
    needs: [deploy-backend-hk, deploy-backend-us]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy-backend-hk.result }}" == "success" ] && [ "${{ needs.deploy-backend-us.result }}" == "success" ]; then
            echo "✅ 部署成功完成"
          else
            echo "❌ 部署失败"
            exit 1
          fi
